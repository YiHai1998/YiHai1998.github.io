软件架构的终极目标：用最小的人力成本来满足构建和维护该系统的需求。

因此，要求一个系统高并发高可用也就是顺理成章的。





>简单（大道至简）而非简陋（编码逻辑单一，漏洞百出）
>
>平衡而非妥协
>
>迭代而不能是半成品



如果一个系统设计得错综复杂、耦合紧密，无疑是非常糟糕的，这种典型的乱麻系统会增加维护成本，不断增加新人，即使每个人都非常努力工作，最终也会榨干公司的利润。

工程师的大部分时间都消耗在了修补系统上，而不是完成新的实际功能。在系统设计之初，大多数工程师们想象着产品上线最重要，未来可以重构，但是真的能拖到重构整个系统吗？无数竞争对手在死盯着你打下来的地盘。



艾森豪威尔矩阵

> 紧急的难题永远不重要，重要的难题永远不紧急。